<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Packet Disarray]]></title>
  <link href="blog.packetdisarray.com/atom.xml" rel="self"/>
  <link href="blog.packetdisarray.com/"/>
  <updated>2015-05-26T21:12:24-07:00</updated>
  <id>blog.packetdisarray.com/</id>
  <author>
    <name><![CDATA[Bethany Long]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IPv6 timeouts on FreeBSD with PF]]></title>
    <link href="blog.packetdisarray.com/2015/04/06/ipv6-timeouts-freebsd-pf/"/>
    <updated>2015-04-06T00:00:00-07:00</updated>
    <id>blog.packetdisarray.com/2015/04/06/ipv6-timeouts-freebsd-pf</id>
    <content type="html"><![CDATA[<p>After migrating my public-facing cloud servers to shiny new FreeBSD VMs on
DigitalOcean, I was somewhat disturbed by the long delays or timeouts I
experienced when initiating connections to certain hosts, such as
<code>pkg.freebsd.org</code> and <code>update.freebsd.org</code>. This would happen during the DNS
lookup phase. The issue was not related to a single DNS server, or even to DNS
lookups in general &mdash; when I manually did (for example) <code>dig update.freebsd.org
@8.8.8.8</code>, I got results immediately. However, when I removed DO&rsquo;s two default
IPv6 nameservers in <code>resolv.conf</code>, problematic lookups sped up, but they were
still slow. I had enabled IPv6 when setting up the VMs, and I was using my
trusty old <code>pf.conf</code>.  Here&rsquo;s an excerpt:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># (Setting up interfaces, macros, etc)
</span><span class='line'># ...
</span><span class='line'>
</span><span class='line'>block log
</span><span class='line'>
</span><span class='line'>pass out all keep state
</span><span class='line'>
</span><span class='line'>pass in on $ext_if proto icmp
</span><span class='line'>
</span><span class='line'># (Allowing traffic to certain ports)
</span><span class='line'># ...</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Not having any luck blaming the issue on one specific domain or nameserver, I
decided to dig <em>(groan)</em> deeper into the problematic names.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[bethany@host ~]$ dig update.freebsd.org
</span><span class='line'>
</span><span class='line'>(...)
</span><span class='line'>
</span><span class='line'>;; ANSWER SECTION:
</span><span class='line'>update.freebsd.org.     261     IN      CNAME   update2.freebsd.org.
</span><span class='line'>update2.freebsd.org.    261     IN      A       149.20.53.26
</span><span class='line'>
</span><span class='line'>(...)
</span><span class='line'>
</span><span class='line'>[bethany@host ~]$ time nc -z 149.20.53.26 80
</span><span class='line'>Connection to 149.20.53.26 80 port [tcp/http] succeeded!
</span><span class='line'>
</span><span class='line'>real    0m0.004s
</span><span class='line'>user    0m0.000s
</span><span class='line'>sys     0m0.006s</span></code></pre></td></tr></table></div></figure>


<p>No issues on IPv4, then. What about IPv6?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[bethany@host ~]$ dig -t AAAA update.freebsd.org
</span><span class='line'>
</span><span class='line'>(...)
</span><span class='line'>
</span><span class='line'>;; ANSWER SECTION:
</span><span class='line'>update.freebsd.org.     219     IN      CNAME   update2.freebsd.org.
</span><span class='line'>update2.freebsd.org.    12      IN      AAAA    2001:4f8:3:ffe0:406a:0:16:1a
</span><span class='line'>
</span><span class='line'>(...)
</span><span class='line'>
</span><span class='line'>[bethany@host ~]$ time nc -z 2001:4f8:3:ffe0:406a:0:16:1a 80
</span><span class='line'>
</span><span class='line'>real    0m15.632s
</span><span class='line'>user    0m0.000s
</span><span class='line'>sys     0m0.009s</span></code></pre></td></tr></table></div></figure>


<p>Aha! (Note the lack of a &ldquo;connection succeeded&rdquo; message &mdash; it timed out.) When I
tried to connect to other IPv6 hosts, I got timeouts again and again. What else
could there be to check before running off crying to DO support that their image
is borked?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[bethany@host ~]$ sudo pfctl -d
</span><span class='line'>No ALTQ support in kernel
</span><span class='line'>ALTQ related functions disabled
</span><span class='line'>pf disabled
</span><span class='line'>
</span><span class='line'>[bethany@host ~]$ time nc -z 2001:4f8:3:ffe0:406a:0:16:1a 80
</span><span class='line'>Connection to 2001:4f8:3:ffe0:406a:0:16:1a 80 port [tcp/http] succeeded!
</span><span class='line'>
</span><span class='line'>real    0m0.013s
</span><span class='line'>user    0m0.000s
</span><span class='line'>sys     0m0.010s
</span><span class='line'>
</span><span class='line'>[bethany@host ~]$ sudo pfctl -e
</span><span class='line'>No ALTQ support in kernel
</span><span class='line'>ALTQ related functions disabled
</span><span class='line'>pf enabled</span></code></pre></td></tr></table></div></figure>


<p>This was frustrating and suspicious. PF should be keeping TCP state, and I
haven&rsquo;t restricted outbound connections. What else could PF be blocking and
causing trouble with? To find out, I checked <code>pflog</code> and initiated another
forlorn connection:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[bethany@host ~]$ sudo service pflog onestart
</span><span class='line'>Starting pflog.
</span><span class='line'>
</span><span class='line'>[bethany@host ~]$ sudo tcpdump -nettti pflog0
</span><span class='line'>tcpdump: WARNING: pflog0: no IPv4 address assigned
</span><span class='line'>tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
</span><span class='line'>listening on pflog0, link-type PFLOG (OpenBSD pflog file), capture size 65535 bytes
</span><span class='line'>capability mode sandbox enabled
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>00:00:00.000000 rule 0..16777216/0(match): block in on vtnet0: 2604:my:pre:fix::1 &gt; 2604:my:pre:fix::my:vm: ICMP6, neighbor advertisement, tgt is 2604:my:pre:fix::1, length 32
</span><span class='line'>00:00:01.028675 rule 0..16777216/0(match): block in on vtnet0: 2604:my:pre:fix::1 &gt; 2604:my:pre:fix::my:vm: ICMP6, neighbor advertisement, tgt is 2604:my:pre:fix::1, length 32
</span><span class='line'>00:00:01.002990 rule 0..16777216/0(match): block in on vtnet0: 2604:my:pre:fix::1 &gt; 2604:my:pre:fix::my:vm: ICMP6, neighbor advertisement, tgt is 2604:my:pre:fix::1, length 32</span></code></pre></td></tr></table></div></figure>


<p>PF had been blocking IPv6&rsquo;s neighbor discovery protocols (which use ICMPv6)!
After making a one-line fix to <code>pf.conf</code>&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pass in on $ext_if proto icmp6</span></code></pre></td></tr></table></div></figure>


<p>&hellip;my issues subsided.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[bethany@host ~]$ time sudo pkg update
</span><span class='line'>Updating FreeBSD repository catalogue...
</span><span class='line'>FreeBSD repository is up-to-date.
</span><span class='line'>All repositories are up-to-date.
</span><span class='line'>
</span><span class='line'>real    0m0.590s
</span><span class='line'>user    0m0.017s
</span><span class='line'>sys     0m0.009s</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yesteryear]]></title>
    <link href="blog.packetdisarray.com/2015/03/01/yesteryear/"/>
    <updated>2015-03-01T00:00:00-08:00</updated>
    <id>blog.packetdisarray.com/2015/03/01/yesteryear</id>
    <content type="html"><![CDATA[<p>In early 2012, between when I applied for colleges and when I accepted one of
them, I was invited to apply for <a href="https://cse.wwu.edu/cs/computer-sciencemath-scholars-program">a scholarship and mentoring program</a>
at WWU for women in computer science and math. Now, having been part of that
program for a couple years and already fairly close to graduating, I&rsquo;m
overwhelmingly thankful for the opportunities it&rsquo;s given me.</p>

<p>These were my answers to the questions I was asked when I applied.</p>

<!-- more -->


<p><strong>Why do you want to major in computer science or math?</strong></p>

<p>I have had a lifelong affinity for computers and math, as well as for helping
people, so it should come as no surprise to you that I&rsquo;ve always been the go-to
girl for computer and math help. As early as elementary school, teachers asked
for my assistance with finicky computers rather than waiting for the district
tech support, and they rarely bothered making answer keys for math homework
since they knew they could use my paper instead. This naturally made me quite
popular among my classmates as well, though I always did my best to help them
learn the concepts, not just give them answers. These talents have continued
throughout my life in school, though I hadn&rsquo;t until recently considered math or
computers as a career. My perspective has changed, however, as the constant news
about security breaches and other attacks on computer systems has grown to a
fever pitch over the last year. Previously, I wanted to be a linguist or
musician; my computer skills were more of a hobby than a professional interest.
Being self-aggrandizing makes me feel sick to my stomach, but I recognize that
for most people &mdash; even most computer people &mdash; information security is not a
strong or enjoyable subject like it is for me! I wholeheartedly feel that it is
my duty to work at defending our nation against computer attackers, whether for
national security or the economy, because of my unusual combination of aptitude
and interest in the field. Pursuing a computer science major is an essential
step toward that goal.</p>

<p><strong>What do you think makes you a successful student?</strong></p>

<p>I am a successful student because I have high standards for myself and I&rsquo;m not
afraid of hard work. Some might say that I&rsquo;m motivated by a fear of failure, and
perhaps that&rsquo;s true &mdash; but I don&rsquo;t care whether it is or isn&rsquo;t. Where others
experience fear, I see an opportunity to get the gears of my mind whirring and a
powerful incentive to find a correct (or acceptable) solution. So while many
people experience stage fright before a musical performance or test anxiety
before a big exam, my strategy is to ignore any sense of fear I do notice
creeping up on me, since I see it crippling others so often, and throw all I can
at the situation. If I did feel any fear in the first place, it flees in terror
of my indomitable force when I&rsquo;m fully prepared!</p>

<p>My eagerness at tackling daunting challenges and my sheer joy when I succeed
motivate me to expect nothing less of myself than my best effort. I know that,
within reason, I can accomplish anything I set my mind to, and I refuse
to let anyone or anything dissuade me. That being said, my close familiarity
with my track record means that I judge myself far more harshly than anyone else
does (except maybe religious fundamentalists &mdash; but that&rsquo;s another story).
However, since I am my own toughest critic, I have the confidence to pursue my
goals without tiptoeing around or cowering from others&#8217; disapproval. I owe my
success to my self-assurance and my work ethic.</p>

<p><strong>Beyond your academic record, tell us more about you.</strong></p>

<p>There are a great many uncommon activities I take pleasure in, from belting out
a sax cadenza in front of several hundred people, to gleefully persuading my car
to coast at the speed limit for half a mile, to programming miniature LED raves.
However, there isn&rsquo;t much short of firewalls or differentiation that gratifies
me more than crocheting and cooking. Just the other day, I finally completed
crocheting a large afghan, using over 1.6 miles of yarn (costing about $25) in
total. It was truly an exercise in perseverance, but it paid off! I remember
when I first started the project last July and I took it camping to pass the
time; it seemed so overwhelming. I knew I could get away with just stopping then
and leaving it as a scarf with an odd pattern, but I&rsquo;m so glad now that I pushed
onward and finished. It&rsquo;s a great companion on cold evenings, and my cats seem
to agree!</p>

<p>Another activity I enjoy far more than I should be allowed to is cooking. It
seems that many people view cooking as a chore to be avoided whenever possible,
but I feel that food nourishes the soul as well as the body. So while I
know that frying some rice or putting together a soup will take half an hour
longer than pouring a pile of Cheez-Its, I also feel that creating a healthy
meal out of real food is worth it for the satisfaction and fulfillment. Coaxing
a pizza to emerge from flour, tomatoes, and cheese, for example, is far more
rewarding than just ordering one anyway! Between crocheting and cooking, I not
only save bucketloads of money versus buying finished products, but in
exercising my creativity, I also mold myself into more of a well-rounded person.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bus error on FreeBSD with sudo and LDAP]]></title>
    <link href="blog.packetdisarray.com/2014/11/23/freebsd-sudo-ldap-bus-error/"/>
    <updated>2014-11-23T00:00:00-08:00</updated>
    <id>blog.packetdisarray.com/2014/11/23/freebsd-sudo-ldap-bus-error</id>
    <content type="html"><![CDATA[<p>Today in weird ungoogleable errors:</p>

<pre><code>[longb4@host ~]$ sudo ls
bar     baz     foo
Bus error
[longb4@host ~]$ echo $?
138
</code></pre>

<p><a href="https://www.destroyallsoftware.com/talks/wat">Wat</a>. [1]</p>

<p>This was on FreeBSD 10.0-RELEASE (amd64), after executing what I thought would be a
routine <code>pkg upgrade</code>. The pkgs that were thusly upgraded had been built in a
<a href="https://www.freebsd.org/doc/handbook/ports-poudriere.html">Poudriere</a> bulk
build just moments before. I was logged in as an LDAP user (via <code>pam_ldap</code>,
<code>nss_ldap</code>, and <code>openldap-client</code>) and using <code>bash</code> as my shell. New SSH logins
to LDAP users still worked and sudoers could still <code>sudo</code>, so I knew at least
that PAM, the LDAP client, and <code>sudo</code> weren&rsquo;t completely hosed. Other commands I
tried worked as expected &mdash; the misbehavior only manifested when I ran <code>sudo</code>.</p>

<!-- more -->


<p>Things started making a bit more sense when I discovered that local users
(including root) could <code>sudo</code> without the bus error occurring. This narrowed my
issue down to the LDAP client stack, which in my experience is constantly
looking for new and troubling ways to mysteriously break. I shouldn&rsquo;t have been
surprised.</p>

<p>In the end, I just forcibly rebuilt the packages for the LDAP client stack and
then forcibly upgraded them on the client, after which the bus errors stopped
happening. I&rsquo;m inferring that somewhere along the way, a package didn&rsquo;t get
linked against the right library on the Poudriere server or a package didn&rsquo;t
upgrade on the client. On FreeBSD machines that build their own pkgs through
ports, I&rsquo;m in the habit of recursive and forcible <code>portupgrade</code>s when upgrading
the LDAP client stack, but this experience shows that developing similar habits
when using newer methods like Poudriere + <code>pkg upgrade</code> would be worthwhile.</p>

<p>[1] Before you speak up, I know what a bus error is, but just haven&rsquo;t managed
to provoke one on this architecture before &mdash; much less by accident.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet errors on FreeBSD: uninitialized class variable @@lock in Object]]></title>
    <link href="blog.packetdisarray.com/2014/06/23/freebsd-puppet-uninitialized-class-variable-lock/"/>
    <updated>2014-06-23T00:00:00-07:00</updated>
    <id>blog.packetdisarray.com/2014/06/23/freebsd-puppet-uninitialized-class-variable-lock</id>
    <content type="html"><![CDATA[<p>I was vexed by this error when setting up a host with Puppet 3.6.2 on FreeBSD 9.2 recently:</p>

<pre><code>Error: Could not set 'present' on ensure: uninitialized class variable @@lock in Object at 52:/usr/local/etc/puppet/modules/ldap/manifests/init.pp
Error: Could not set 'present' on ensure: uninitialized class variable @@lock in Object at 52:/usr/local/etc/puppet/modules/ldap/manifests/init.pp
Wrapped exception:
uninitialized class variable @@lock in Object
Error: /Stage[main]/Ldap/Package[net/nss_ldap]/ensure: change from absent to present failed: Could not set 'present' on ensure: uninitialized class variable @@lock in Object at 52:/usr/local/etc/puppet/modules/ldap/manifests/init.pp
</code></pre>

<p>The line it referred to was trying to install the <code>net/nss_ldap</code> package. I had
run <code>pkg2ng</code> on the host and included the <a href="https://forge.puppetlabs.com/zleslie/pkgng">pkgng</a>
module in the node&rsquo;s manifest.</p>

<!-- more -->


<p>When I searched for <code>@@lock</code> in the Puppet source code, the only references I
found were from the <code>freebsd</code> package provider. That provider uses the
deprecated <code>pkg_</code> commands and for some reason is included in Puppet while
<code>pkgng</code> is not.</p>

<pre><code>[longb4-local@testdb /usr/ports/sysutils/puppet]$ sudo make fetch extract patch configure
[longb4-local@testdb /usr/ports/sysutils/puppet]$ cd work/puppet-3.6.2/
[longb4-local@testdb /usr/ports/sysutils/puppet/work/puppet-3.6.2]$ find . -exec grep -HnsiI '@@lock' {} \;                                                                                                                                                                       
./lib/puppet/provider/package/freebsd.rb:18:  class_variable_set(:@@lock, Mutex.new)
./lib/puppet/provider/package/freebsd.rb:73:    @@lock.synchronize do
</code></pre>

<h2>Solution</h2>

<p>Since Puppet was trying to use the non-working <code>pkg_</code> commands, I made it use
the <code>pkgng</code> package provider when installing packages on the affected node by
adding this to the node manifest:</p>

<pre><code>Package {
    provider =&gt; pkgng,
}
</code></pre>

<p>After that, Puppet runs completed successfully.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extending LVM Volume Size]]></title>
    <link href="blog.packetdisarray.com/2014/05/29/lvm-extend/"/>
    <updated>2014-05-29T00:00:00-07:00</updated>
    <id>blog.packetdisarray.com/2014/05/29/lvm-extend</id>
    <content type="html"><![CDATA[<p>I use <a href="http://tldp.org/HOWTO/LVM-HOWTO/whatisvolman.html">LVM</a> to manage virtual
disks on my <a href="https://wiki.debian.org/Xen#Xen_Overview">Xen</a> hypervisor. It&rsquo;s mostly
&ldquo;set it and forget it&rdquo;, but occasionally, the virtual disks get close to filling up.
(Monitoring this with Nagios gives me plenty of warning!)
When I&rsquo;d rather not go through the filesystems and choose what to delete, or when
I&rsquo;ve already done that and they&rsquo;re still too full, it&rsquo;s really convenient to be
able to just extend the disk. For this reason, I try to keep at least 1 TB of space
unallocated on my hypervisor&rsquo;s main LVM volume group.</p>

<h2>Procedure</h2>

<p>Let&rsquo;s say I want to extend a 500 GB <a href="http://tldp.org/HOWTO/LVM-HOWTO/lv.html">LV</a>,
which shows up as <code>/dev/xvda5</code> on a virtual machine called <code>guest</code>. This LV
is called <code>storage</code> on a hypervisor called <code>host</code>, and <code>storage</code> lives on a
<a href="http://tldp.org/HOWTO/LVM-HOWTO/vg.html">VG</a> called <code>hard-disk</code>. I want to extend
<code>storage</code>&rsquo;s size to 750 GB.</p>

<!-- more -->


<p>First, I check that there&rsquo;s enough free space on the VG (at least 250 GB, in this case):</p>

<pre><code>host$ sudo vgdisplay hard-disk
--- Volume group ---
VG Name               hard-disk
System ID             
Format                lvm2
Metadata Areas        1
Metadata Sequence No  6
VG Access             read/write
VG Status             resizable
MAX LV                0
Cur LV                5
Open LV               5
Max PV                0
Cur PV                1
Act PV                1
VG Size               2.73 TiB
PE Size               4.00 MiB
Total PE              715396
Alloc PE / Size       460800 / 1.76 TiB
Free  PE / Size       254596 / 994.52 GiB
</code></pre>

<p>For safety, I shut down <code>guest</code>. (If <code>guest</code> were running FreeBSD rather than
Debian, I would have used the <code>-p</code> flag rather than <code>-h</code>.)</p>

<pre><code>guest$ sudo shutdown -h now
</code></pre>

<p>Once <code>guest</code> has been shut down, I extend <code>storage</code>&rsquo;s LV size:</p>

<pre><code>host$ sudo lvextend -L750G /dev/hard-disk/storage
</code></pre>

<p>The LV <code>storage</code> is just a block device. The filesystem on top of it (ext4)
needs to be resized as well. But before that, I need to check the filesystem
for errors:</p>

<pre><code>host$ sudo e2fsck -f /dev/hard-disk/storage
</code></pre>

<p>Now I can extend the filesystem to cover the entire LV. If I skipped this step,
the filesystem size wouldn&rsquo;t be any different after starting <code>guest</code> back up again,
despite the LV being larger.</p>

<pre><code>host$ sudo resize2fs /dev/hard-disk/storage
</code></pre>

<p>Finally, I start up <code>guest</code>, which involves this in my case:</p>

<pre><code>host$ sudo xm create /etc/xen/guest.cfg
</code></pre>

<p>Once <code>guest</code> is up, I can verify that <code>storage</code> and the filesystem were extended
with <code>df -h /dev/xvda5</code>. On <code>host</code>, I can verify that the LV was extended with
<code>sudo lvdisplay /dev/hard-disk/storage</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Resource Limits]]></title>
    <link href="blog.packetdisarray.com/2014/05/19/ulimit/"/>
    <updated>2014-05-19T00:00:00-07:00</updated>
    <id>blog.packetdisarray.com/2014/05/19/ulimit</id>
    <content type="html"><![CDATA[<p>In Unix-like systems, the <code>ulimit</code> command lets you check resource limits. When
these limits are updated, they only apply to sessions started after the change.</p>

<pre><code>$ ulimit -a
core file size          (blocks, -c) unlimited
data seg size           (kbytes, -d) 524288
file size               (blocks, -f) unlimited
max locked memory       (kbytes, -l) 335262
max memory size         (kbytes, -m) 1004356
open files                      (-n) 128
pipe size            (512 bytes, -p) 1
stack size              (kbytes, -s) 4096
cpu time               (seconds, -t) unlimited
max user processes              (-u) 64
virtual memory          (kbytes, -v) 528384
</code></pre>

<p>The one that you probably want to pay the most attention to is &ldquo;max user
processes&rdquo;. Reducing it low enough will prevent a
<a href="http://en.wikipedia.org/wiki/Fork_bomb">fork bomb</a> from succeeding in making
your system unresponsive. However, setting it too low will keep users from doing
normal tasks, especially if that involves compiling programs. Depending on the
system&rsquo;s purpose and on whether a restrictive process limit is imposed on all
users or just a few, anywhere from 50 to 300 or so could be a good choice.</p>

<p>Linux and Unix OSs tend to err on the side of permissiveness where process
limits are concerned.</p>

<pre><code>$ ulimit -u
34290
</code></pre>

<p>Oops. Better fix that.</p>

<!-- more -->


<p>Resource limits can be changed for a single session by giving a value after the
command line flag for that limit. Once you lower a resource limit for a
session, you might not be able to raise it again unless you&rsquo;re root.</p>

<pre><code>$ ulimit -u 300
$ ulimit -u
300
$ ulimit -u 34290
-bash: ulimit: max user processes: cannot modify limit: Operation not permitted
</code></pre>

<p>If you want to change a resource limit for <em>all</em> new sessions, the method varies
by OS.</p>

<h2>Linux</h2>

<p><em>More info:</em> <code>man 5 limits.conf</code></p>

<h2>FreeBSD, NetBSD, OpenBSD</h2>

<p><em>More info:</em> <code>man 5 login.conf</code>, <code>man 1 cap_mkdb</code></p>
]]></content>
  </entry>
  
</feed>
