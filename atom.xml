<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Packet Disarray]]></title>
  <link href="blog.packetdisarray.com/atom.xml" rel="self"/>
  <link href="blog.packetdisarray.com/"/>
  <updated>2014-05-29T10:46:39-07:00</updated>
  <id>blog.packetdisarray.com/</id>
  <author>
    <name><![CDATA[Bethany Long]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extending LVM Volume Size]]></title>
    <link href="blog.packetdisarray.com/2014/05/29/lvm-extend/"/>
    <updated>2014-05-29T09:37:00-07:00</updated>
    <id>blog.packetdisarray.com/2014/05/29/lvm-extend</id>
    <content type="html"><![CDATA[<p>I use <a href="http://tldp.org/HOWTO/LVM-HOWTO/whatisvolman.html">LVM</a> to manage virtual
disks on my <a href="https://wiki.debian.org/Xen#Xen_Overview">Xen</a> hypervisor. It&rsquo;s mostly
&ldquo;set it and forget it&rdquo;, but occasionally, the virtual disks get close to filling up.
(Monitoring this with Nagios gives me plenty of warning!)
When I&rsquo;d rather not go through the filesystems and choose what to delete, or when
I&rsquo;ve already done that and they&rsquo;re still too full, it&rsquo;s really convenient to be
able to just extend the disk. For this reason, I try to keep at least 1 TB of space
unallocated on my hypervisor&rsquo;s main LVM physical volume.</p>

<h2>Procedure</h2>

<p>Let&rsquo;s say I want to extend a 500 GB <a href="http://tldp.org/HOWTO/LVM-HOWTO/lv.html">LV</a>,
which shows up as <code>/dev/xvda5</code> on a virtual machine called <code>guest</code>. This LV
is called <code>storage</code> on a hypervisor called <code>host</code>, and <code>storage</code> lives on a
<a href="http://tldp.org/HOWTO/LVM-HOWTO/vg.html">VG</a> called <code>hard-disk</code>. I want to extend
<code>storage</code>&rsquo;s size to 750 GB.</p>

<p>First, I check that there&rsquo;s enough free space on the VG (at least 250 GB, in this case):</p>

<pre><code>host$ sudo vgdisplay hard-disk
--- Volume group ---
VG Name               hard-disk
System ID             
Format                lvm2
Metadata Areas        1
Metadata Sequence No  6
VG Access             read/write
VG Status             resizable
MAX LV                0
Cur LV                5
Open LV               5
Max PV                0
Cur PV                1
Act PV                1
VG Size               2.73 TiB
PE Size               4.00 MiB
Total PE              715396
Alloc PE / Size       460800 / 1.76 TiB
Free  PE / Size       254596 / 994.52 GiB
</code></pre>

<p>For safety, I shut down <code>guest</code>. (If <code>guest</code> were running FreeBSD rather than
Debian, I would have used the <code>-p</code> flag rather than <code>-h</code>.)</p>

<pre><code>guest$ sudo shutdown -h now
</code></pre>

<p>Once <code>guest</code> has been shut down, I extend <code>storage</code>&rsquo;s LV size:</p>

<pre><code>host$ sudo lvextend -L750G /dev/hard-disk/storage
</code></pre>

<p>The LV <code>storage</code> is just a block device. The filesystem on top of it (ext4)
needs to be resized as well. But before that, I need to check the filesystem
for errors:</p>

<pre><code>host$ sudo e2fsck -f /dev/hard-disk/storage
</code></pre>

<p>Now I can extend the filesystem to cover the entire LV. If I skipped this step,
the filesystem size wouldn&rsquo;t be any different after starting <code>guest</code> back up again,
despite the LV being larger.</p>

<pre><code>host$ sudo resize2fs /dev/hard-disk/storage
</code></pre>

<p>Finally, I start up <code>guest</code>, which involves this in my case:</p>

<pre><code>host$ sudo xm create /etc/xen/guest.cfg
</code></pre>

<p>Once <code>guest</code> is up, I can verify that <code>storage</code> and the filesystem were extended
with <code>df -h /dev/xvda5</code>. On <code>host</code>, I can verify that the LV was extended with
<code>sudo lvdisplay /dev/hard-disk/storage</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Resource Limits]]></title>
    <link href="blog.packetdisarray.com/2014/05/19/ulimit/"/>
    <updated>2014-05-19T15:26:00-07:00</updated>
    <id>blog.packetdisarray.com/2014/05/19/ulimit</id>
    <content type="html"><![CDATA[<p>In Unix-like systems, the <code>ulimit</code> command lets you check resource limits. When
these limits are updated, they only apply to sessions started after the change.</p>

<pre><code>$ ulimit -a
core file size          (blocks, -c) unlimited
data seg size           (kbytes, -d) 524288
file size               (blocks, -f) unlimited
max locked memory       (kbytes, -l) 335262
max memory size         (kbytes, -m) 1004356
open files                      (-n) 128
pipe size            (512 bytes, -p) 1
stack size              (kbytes, -s) 4096
cpu time               (seconds, -t) unlimited
max user processes              (-u) 64
virtual memory          (kbytes, -v) 528384
</code></pre>

<p>The one that you probably want to pay the most attention to is &ldquo;max user
processes&rdquo;. Reducing it low enough will prevent a
<a href="http://en.wikipedia.org/wiki/Fork_bomb">fork bomb</a> from succeeding in making
your system unresponsive. However, setting it too low will keep users from doing
normal tasks, especially if that involves compiling programs. Depending on the
system&rsquo;s purpose and on whether a restrictive process limit is imposed on all
users or just a few, anywhere from 50 to 300 or so could be a good choice.</p>

<p>Linux and Unix OSs tend to err on the side of permissiveness where process
limits are concerned.</p>

<pre><code>$ ulimit -u
34290
</code></pre>

<p>Oops. Better fix that.</p>

<p>Resource limits can be changed for a single session by giving a value after the
command line flag for that limit. Once you lower a resource limit for a
session, you might not be able to raise it again unless you&rsquo;re root.</p>

<pre><code>$ ulimit -u 300
$ ulimit -u
300
$ ulimit -u 34290
-bash: ulimit: max user processes: cannot modify limit: Operation not permitted
</code></pre>

<p>If you want to change a resource limit for <em>all</em> new sessions, the method varies
by OS.</p>

<h2>Linux</h2>

<p><em>More info:</em> <code>man 5 limits.conf</code></p>

<h2>FreeBSD, NetBSD, OpenBSD</h2>

<p><em>More info:</em> <code>man 5 login.conf</code>, <code>man 1 cap_mkdb</code></p>
]]></content>
  </entry>
  
</feed>
